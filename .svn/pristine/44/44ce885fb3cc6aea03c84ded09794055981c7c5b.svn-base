package kr.nomad.mars.dao;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;


import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.Bbs;




public class BbsDao {

	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper bbsMapper = new RowMapper() {
		public Bbs mapRow(ResultSet rs, int rowNum) throws SQLException {
			Bbs bbs = new Bbs();
			bbs.setBbsSeq(rs.getInt("bbs_seq"));
			bbs.setBbsType(rs.getString("bbs_type"));
			bbs.setBbsType2(rs.getString("bbs_type2"));
			bbs.setProjectSeq(rs.getInt("project_seq"));
			bbs.setBbsTitle(rs.getString("bbs_title"));
			bbs.setAnswerStatus(rs.getInt("answer_status"));
			bbs.setBbsContents(rs.getString("bbs_contents"));
			bbs.setSendSms(rs.getInt("send_sms"));
			bbs.setUserId(rs.getString("user_id"));
			bbs.setBbsRegDate(rs.getString("bbs_reg_date"));
			return bbs;
		}
	};
	
	private RowMapper VbbsMapper = new RowMapper() {
		public Bbs mapRow(ResultSet rs, int rowNum) throws SQLException {
			Bbs bbs = new Bbs();
			bbs.setBbsSeq(rs.getInt("bbs_seq"));
			bbs.setBbsType(rs.getString("bbs_type"));
			bbs.setBbsType2(rs.getString("bbs_type2"));
			bbs.setProjectSeq(rs.getInt("project_seq"));
			bbs.setBbsTitle(rs.getString("bbs_title"));
			bbs.setAnswerStatus(rs.getInt("answer_status"));
			bbs.setBbsContents(rs.getString("bbs_contents"));
			bbs.setSendSms(rs.getInt("send_sms"));
			bbs.setUserId(rs.getString("user_id"));
			bbs.setBbsRegDate(rs.getString("bbs_reg_date"));
			bbs.setUserName(rs.getString("user_name"));
			bbs.setCompanyName(rs.getString("company_name"));
			return bbs;
		}
	};

	public void addBbs(final Bbs bbs) {
		String query = "" +
				"INSERT INTO T_NF_BBS " +
				"	( bbs_type, bbs_type2,"
				+ " project_seq, bbs_title, answer_status,"
				+ " bbs_contents, send_sms, user_id,"
				+ " bbs_reg_date) " +
				"VALUES " +
				"	( ?, ?, "
				+ "?, ?, ?,"
				+ " ?, ?, ?,"
				+ " getDate()) ";
		this.jdbcTemplate.update(query, new Object[] {
		
			bbs.getBbsType(),
			bbs.getBbsType2(),
			bbs.getProjectSeq(),
			bbs.getBbsTitle(),
			bbs.getAnswerStatus(),
			bbs.getBbsContents(),
			bbs.getSendSms(),
			bbs.getUserId()
		});
	}

	public void deleteBbs(int bbs_seq) {
		String query = "DELETE FROM T_NF_BBS WHERE bbs_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { bbs_seq });
	}

	public void updateBbs(Bbs bbs) { 
		String query = "" + 
				"UPDATE T_NF_BBS SET " +
				
				"	bbs_type = ?, " +
				"	bbs_type2 = ?, " +
				"	project_seq = ?, " +
				"	bbs_title = ?, " +
				"	answer_status = ?, " +
				"	bbs_contents = ?, " +
				"	send_sms = ?, " +
				"	user_id = ? " +
				
				"WHERE bbs_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
		
			bbs.getBbsType(),
			bbs.getBbsType2(),
			bbs.getProjectSeq(),
			bbs.getBbsTitle(),
			bbs.getAnswerStatus(),
			bbs.getBbsContents(),
			bbs.getSendSms(),
			bbs.getUserId(),
			bbs.getBbsSeq()
		});
	}

	public Bbs getBbs(int bbs_seq) {
		String query = "" + 
				"SELECT * " +
				"FROM V_NF_BBS " +
				"WHERE bbs_seq = ? ";
		return (Bbs)this.jdbcTemplate.queryForObject(query, new Object[] { bbs_seq }, this.VbbsMapper);
	}

	public List<Bbs> getBbsList(int projectSeq,String bbsType,String bbsType2,int page, int itemCountPerPage) {
		String con="where 1=1 ";
		if(projectSeq!=0){
			con+=" and project_seq = "+projectSeq;
		}
		if(!bbsType.equals("0")){
			con+=" and bbs_type = '"+bbsType+"'";
		}
		if(!bbsType2.equals("0")){
			con+=" and bbs_type2 != '"+bbsType2+"'";
		}
		String query = "" 
				+ "	SELECT * FROM ( "
				+ "		SELECT "
				+ "			ROW_NUMBER() OVER(order by bbs_reg_date desc) as row_seq, "
				+ "			A.* "
				+"  from v_nf_bbs as A "+con
				+ "	) AS a WHERE row_seq BETWEEN (("+page+" - 1) * "+itemCountPerPage+") +1 AND "+page+" * "+itemCountPerPage+" ";
		return (List<Bbs>)this.jdbcTemplate.query(query, this.VbbsMapper);
	}
	
	public int getBbsCount(int projectSeq,String bbsType,String bbsType2) {
		String con="where 1=1 ";
		if(projectSeq!=0){
			con+=" and project_seq = "+projectSeq;
		}
		if(!bbsType.equals("0")){
			con+=" and bbs_type = '"+bbsType+"'";
		}
		if(!bbsType2.equals("0")){
			con+=" and bbs_type2 != '"+bbsType2+"'";
		}
		String query = "" 
				+ "	SELECT count(*) FROM  "
				+"   v_nf_bbs "+con;
		return this.jdbcTemplate.queryForInt(query);
	}
}

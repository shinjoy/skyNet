package kr.nomad.mars.dao;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import javax.sql.DataSource;


import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;

import kr.nomad.mars.dto.Todo;
public class TodoDao {
	
	private JdbcTemplate jdbcTemplate;
	public void setDataSource(DataSource dataSource) {
	    this.jdbcTemplate = new JdbcTemplate(dataSource);
	}

	private RowMapper todoMapper = new RowMapper() {
		public Todo mapRow(ResultSet rs, int rowNum) throws SQLException {
			Todo todo = new Todo();
			todo.setTodoSeq(rs.getInt("todo_seq"));
			todo.setProjectSeq(rs.getInt("project_seq"));
			todo.setModule(rs.getString("module"));
			todo.setProcess(rs.getString("process"));
			todo.setTodo(rs.getString("todo"));
			todo.setTodoPart(rs.getString("todo_part"));
			todo.setTodoStartday(rs.getString("todo_startday"));
			todo.setTodoEndday(rs.getString("todo_endday"));
			todo.setTodoFinishday(rs.getString("todo_finishday"));
			todo.setUserId(rs.getString("user_id"));
			todo.setTodoStatus(rs.getString("todo_status"));
			todo.setTodoComment(rs.getString("todo_comment"));
			todo.setTodoRegDate(rs.getString("todo_reg_date"));
			return todo;
		}
	};

	public void addTodo(final Todo todo) {
		String query = "" +
				"INSERT INTO T_NF_TODO " +
				"	(todo_seq, project_seq, module, process, todo, todo_part, todo_startday, todo_endday, todo_finishday, user_id, todo_status, todo_comment, todo_reg_date) " +
				"VALUES " +
				"	(?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?) ";
		this.jdbcTemplate.update(query, new Object[] {
			todo.getTodoSeq(),
			todo.getProjectSeq(),
			todo.getModule(),
			todo.getProcess(),
			todo.getTodo(),
			todo.getTodoPart(),
			todo.getTodoStartday(),
			todo.getTodoEndday(),
			todo.getTodoFinishday(),
			todo.getUserId(),
			todo.getTodoStatus(),
			todo.getTodoComment(),
			todo.getTodoRegDate()
		});
	}

	public void deleteTodo(String todo_seq) {
		String query = "DELETE FROM T_NF_TODO WHERE todo_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] { todo_seq });
	}

	public void updateTodo(Todo todo) { 
		String query = "" + 
				"UPDATE T_NF_TODO SET " +
				"	todo_seq = ?, " +
				"	project_seq = ?, " +
				"	module = ?, " +
				"	process = ?, " +
				"	todo = ?, " +
				"	todo_part = ?, " +
				"	todo_startday = ?, " +
				"	todo_endday = ?, " +
				"	todo_finishday = ?, " +
				"	user_id = ?, " +
				"	todo_status = ?, " +
				"	todo_comment = ?, " +
				"	todo_reg_date = ? " +
				"WHERE todo_seq = ? ";
		this.jdbcTemplate.update(query, new Object[] {
			todo.getTodoSeq(),
			todo.getProjectSeq(),
			todo.getModule(),
			todo.getProcess(),
			todo.getTodo(),
			todo.getTodoPart(),
			todo.getTodoStartday(),
			todo.getTodoEndday(),
			todo.getTodoFinishday(),
			todo.getUserId(),
			todo.getTodoStatus(),
			todo.getTodoComment(),
			todo.getTodoRegDate()
		});
	}

	public Todo getTodo(String todo_seq) {
		String query = "" + 
				"SELECT todo_seq, project_seq, module, process, todo, todo_part, todo_startday, todo_endday, todo_finishday, user_id, todo_status, todo_comment, todo_reg_date " +
				"FROM T_NF_TODO " +
				"WHERE todo_seq = ? ";
		return (Todo)this.jdbcTemplate.queryForObject(query, new Object[] { todo_seq }, this.todoMapper);
	}

	public List<Todo> getTodoList(int page, int itemCountPerPage) {
		String query = "" +
				"SELECT TOP "+ itemCountPerPage +" todo_seq, project_seq, module, process, todo, todo_part, todo_startday, todo_endday, todo_finishday, user_id, todo_status, todo_comment, todo_reg_date " +
				"FROM T_NF_TODO " +
				"WHERE todo_seq <= ( " +
				"	SELECT MIN(todo_seq) " +
				"	FROM ( " +
				"		SELECT TOP "+ ((page-1) * itemCountPerPage + 1) +" todo_seq " +
				"		FROM T_NF_TODO " +
				"		ORDER BY todo_seq DESC " +
				"	) AS A) " +
				"ORDER BY todo_seq DESC";
		return (List<Todo>)this.jdbcTemplate.query(query, this.todoMapper);
	}

}
